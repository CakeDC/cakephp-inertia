{#
/*
 *  Copyright 2010 - 2024, Cake Development Corporation (https://www.cakedc.com)
 *
 *  Licensed under The MIT License
 *  Redistributions of files must retain the above copyright notice.
 *
 *  @copyright Copyright 2010 - 2024, Cake Development Corporation (https://www.cakedc.com)
 *  @license MIT License (http://www.opensource.org/licenses/mit-license.php)
 */
#}
<script setup>
    import Layout from '@/Components/Layout.vue'
    import { reactive, onMounted, onUnmounted, ref } from 'vue'
    import { router } from '@inertiajs/vue3'
    import { VueEditor } from "vue3-editor";
    import Datepicker from 'vue3-datepicker';
    import Multiselect from '@vueform/multiselect'

    const props = defineProps({
        csrfToken: String,
        flash: [],
        {{singularVar}}: [],
        errors: [],{{- "\n" }}
        {%- for field in fields %}
            {%- if field not in primaryKey %}
                {%- if keyFields[field] is defined %}
        {{ keyFields[field] }}: [],
                {%- endif %}
            {%- endif %}
        {%- endfor %}
        {%- if associations.BelongsToMany is defined %}
            {%- for assocName, assocData in associations.BelongsToMany %}
                {{- "\n" }}        options_{{ assocData.property }}: [],
            {%- endfor %}
        {%- endif %}
    {{- "\n" }}     })

    const components = {
        VueEditor, Datepicker, Multiselect
    }

    const form = reactive({
        {%- if 'add' in action %}
            {%- for field in fields %}
                {%- if field not in primaryKey %}
    {{- "\n" }}        {{field}} : null,{%- endif %}
            {%- endfor %}
            {{- "\n" }}
            {%- if associations.BelongsToMany is defined %}
                {%- for assocName, assocData in associations.BelongsToMany %}
        {{ assocData.property }}: [],
                {%- endfor %}
            {%- endif %}
    {%- endif %}
        {%- if 'edit' in action %}
            {{- "\n" }}
            {%- for field in fields %}
                {%- if field not in primaryKey %}
                    {%- set fieldData = Bake.columnData(field, schema) %}
                    {%- if fieldData.type in ['date', 'timestampfractional'] and fieldData.null %}
        {{field}} : ref(new Date(props.{{singularVar}}.{{field}})),{{- "\n" }}
                    {%- else %}
        {{field}} : props.{{singularVar}}.{{field}},{{- "\n" }}
                    {%- endif %}
                {%- else %}
        {{field}} : props.{{singularVar}}.{{field}},{{- "\n" }}
                {%- endif %}
            {%- endfor %}
            {%- if associations.BelongsToMany is defined %}
                {%- for assocName, assocData in associations.BelongsToMany %}
        {{ assocData.property }}: props.{{singularVar}}.{{assocName|lower}},
                {%- endfor %}
            {%- endif %}
        {%- endif %}

    })

    function submit() {
{{- "\n" }}
    {%- if prefix == '' %}
        let postUrl = '/{{ pluralVar }}/{{ action }}';
    {%- else %}
        let postUrl = '/{{ prefix|lower }}/{{ pluralVar }}/{{ action }}';
    {%- endif %}
    {%- if 'edit' in action %}{{- "\n" }}        postUrl = postUrl + '/' + form.id;
    {%- endif %}

        router.post(postUrl,
            {
                {{- "\n" }}
                {%- for field in fields %}
                    {%- if field not in primaryKey %}
                {{field}} : form.{{field}},{{- "\n" }}
                    {%- endif %}
                {%- endfor %}

        {%- if associations.BelongsToMany is defined %}
            {%- for assocName, assocData in associations.BelongsToMany %}
                {{ assocData.property }}: {
                    _ids : form.{{ assocData.property }}
                }{{- "\n" }}
            {%- endfor %}
        {%- endif %}
            },
            {
                headers: {
                    'X-CSRF-Token': props.csrfToken
                }
            }
        )
    }
    onMounted(() => {
        console.log('Component {{ pluralVar }}/{{ action }} onMounted hook called')
    })
</script>

<style src="@vueform/multiselect/themes/default.css"></style>

{% set fields = Bake.filterFields(fields, schema, modelObject) %}
<template>
    <Layout>
        <div class="row">
            <div class="column-responsive column-80">
                {%- set vueVar = "{{ flash['message'] }}" %}{{- "\n" }}
                <div onclick="this.classList.add('hidden')" :class="[(flash['element'] === undefined) ? 'hidden' : '','message', (flash['element'] === 'flash-success' ? 'success' : 'error')]">{{ vueVar }}</div>
                <div class="{{ pluralVar }} form content">
                    <h3>{{ action|capitalize }} {{ singularHumanName }}</h3>
                    <form @submit.prevent="submit">
                    {%- for field in fields %}
                        {%- if field not in primaryKey %}
                            {%- if keyFields[field] is defined %}{{- "\n" }}
                        <label for="{{ field|replace({'_id': ''}) }}">{{ field|replace({'_id': ''})|capitalize }}:</label>
                        <select v-model="form.{{field}}">
                            <option disabled value="">Please select one</option>
                            {%- set vueVar = "{{ item }}" %}

                            <option v-for="(item, index) in categories" :value="index" :key="index">{{ vueVar }}</option>
                        </select>
                            {%- elseif field not in ['created', 'modified', 'updated'] %}{{- "\n" }}
                                {%- set fieldData = Bake.columnData(field, schema) %}
                                {%- if fieldData.type in ['date', 'datetime', 'time', 'timestampfractional'] and fieldData.null %}
                        <label for="{{field}}">{{field|capitalize}}</label>
                        {%- if fieldData.type in ['date', 'timestampfractional'] %}

                        <Datepicker v-model="form.{{field}}" valueType="format" format="YYYY-MM-DD"></Datepicker>
                        {%- else %}
                            {{ fieldData.type }} Not Implemented in vueTemplate Baked {{- "\n" }}
                        {%- endif %}
                        {{- "\n" }}
                                {%- elseif fieldData.type in ['text'] %}
                        <label for="{{field}}">{{field|capitalize}}:</label>
                        <vue-editor id="{{field}}" v-model="form.{{field}}"></vue-editor>
                        <br/>
                                {%- else %}
                        <label for="{{field}}">{{field|capitalize}}:</label>{{- "\n" }}
                        <input id="{{field}}" v-model="form.{{field}}" />{{- "\n" }}
                        {%- set vueVar = "{{ props.errors." ~ field ~ "._empty }}" %}
                        <div class="message error" v-if="props.errors.{{field}}">{{ vueVar }}</div>{{- "\n" }}
                        {{- "\n" }}
                                {%- endif %}
                            {%- endif %}
                        {%- endif %}
                    {%- endfor %}
                    {%- if associations.BelongsToMany is defined %}
                        {%- for assocName, assocData in associations.BelongsToMany %}
                        <label for="{{ assocData.property }}">{{assocData.property|capitalize}}:</label>
                        <div><Multiselect v-model="form.{{ assocData.property }}" label="{{ assocData.displayField }}" valueProp="id" :object="true" mode="tags" :options="props.options_{{ assocData.property }}" /></div>
                        <br/>
                        {%- endfor %}
                    {% endif %}
                    {{- "\n" }}                        <button type="submit">Submit</button>
                    </form>
                </div>
            </div>
        </div>
    </Layout>
</template>