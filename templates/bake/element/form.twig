<script setup>
    import Layout from '../Layout'
    import { onMounted, onUnmounted, ref } from 'vue'
    import { reactive } from 'vue'
    import { router } from '@inertiajs/vue3'

    const props = defineProps({
        csrfToken: String,
        flash: [],
        {{singularVar}}: [],
        errors: [],
        options_pages: [],
    })

    const form = reactive({
        {% if 'add' in action %}
            {% for field in fields %}
                {%- if field not in primaryKey %}
                    {{field}} : null,{{- "\n" }}
                {%- endif %}
            {%- endfor %}
        {% endif %}
    })

    function submit() {
        {% if prefix == '' %}
            let postUrl = '/{{ pluralVar }}/{{ action }}';
        {% else %}
            let postUrl = '/{{ prefix|lower }}/{{ pluralVar }}/{{ action }}';
        {% endif %}

        router.post(postUrl,
            {
                {% if 'add' in action %}
                    {% for field in fields %}
                        {%- if field not in primaryKey %}
                            {{field}} : form.{{field}},{{- "\n" }}
                        {%- endif %}
                    {%- endfor %}
                {% endif %}
            },
            {
                headers: {
                    'X-CSRF-Token': props.csrfToken
                }
            }
        )
    }
    onMounted(() => {
        console.log('Component {{ pluralVar }}/{{ action }} onMounted hook called')
    })
</script>

{% set fields = Bake.filterFields(fields, schema, modelObject) %}
<template>
    <Layout>
        <div class="row">
            <div class="column-responsive column-80">
                {% set vueVar = "{{ flash['message'] }}" %}
                <div onclick="this.classList.add('hidden')" :class="[(flash['element'] === undefined) ? 'hidden' : '','message', (flash['element'] === 'flash-success' ? 'success' : 'error')]">{{ vueVar }}</div>
                <div class="{{ pluralVar }} form content">
                    <h3>{{ action|capitalize }} {{ singularHumanName }}</h3>
                    <form @submit.prevent="submit">
                        {% for field in fields %}
                            {%- if field not in primaryKey %}
                                {%- if keyFields[field] is defined %}
                                    <label for="{{ field|replace({'_id': ''}) }}">{{ field|replace({'_id': ''})|capitalize }}:</label>
                                    <select v-model="form.{{field}}">
                                        <option disabled value="">Please select one</option>
                                        {% set vueVar = "{{ item }}" %}
                                        <option v-for="(item, index) in categories" :value="index" :key="index">{{ vueVar }}</option>
                                    </select>
                                {%- elseif field not in ['created', 'modified', 'updated'] %}
                                    {%- set fieldData = Bake.columnData(field, schema) %}
                                    {%- if fieldData.type in ['date', 'datetime', 'time', 'timestampfractional'] and fieldData.null %}
                                        <label for="{{field}}">{{field|capitalize}}</label>
                                        {%- if fieldData.type in ['date', 'timestampfractional'] %}
                                            <date-picker v-model="form.{{field}}" valueType="format" format="YYYY-MM-DD"></date-picker>
                                        {%- else %}
                                            {{ fieldData.type }} Not Implemented in vueTemplate Baked {{- "\n" }}
                                        {%- endif %}
                                        {{- "\n" }}
                                    {%- elseif fieldData.type in ['text'] %}
                                        <label for="{{field}}">{{field|capitalize}}:</label>
                                        <vue-editor id="{{field}}" v-model="form.{{field}}"></vue-editor>
                                        <br/>
                                        {{- "\n" }}
                                    {%- else %}
                                        <label for="{{field}}">{{field|capitalize}}:</label>{{- "\n" }}
                                        <input id="{{field}}" v-model="form.{{field}}" />{{- "\n" }}
                                        {% set vueVar = "{{ props.errors." ~ field ~ "._empty }}" %}
                                        <div class="message error" v-if="props.errors.{{field}}">{{ vueVar }}</div>{{- "\n" }}
                                        {{- "\n" }}
                                    {%- endif %}
                                {%- endif %}
                            {%- endif %}
                        {%- endfor %}
                        <button type="submit">Submit</button>
                    </form>
                </div>
            </div>
        </div>
    </Layout>
</template>